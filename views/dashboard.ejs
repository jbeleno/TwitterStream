<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>

    <!-- Required meta tags always come first -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="x-ua-compatible" content="ie=edge">

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/css/bootstrap.min.css" integrity="sha384-y3tfxAZXuh4HwSYylfB+J125MxIs6mR5FOHamPBG064zB+AFeWH94NdvaCBm8qnd" crossorigin="anonymous">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.5.0/css/font-awesome.min.css">

    <!-- Custom CSS -->
    <link rel='stylesheet' href='/css/custom.css' />

    <!-- MapBox -->
    <link href='https://api.mapbox.com/mapbox.js/v2.3.0/mapbox.css' rel='stylesheet' />

    <!-- Leaflet -->
    <link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.2.3/leaflet.draw.css' rel='stylesheet' />
</head>
<body>

    <div id="wrapper"></div>
    <!-- #wrapper -->

    <!-- jQuery first, then Theter and finally Bootstrap JS. -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>
    <script src="https://www.atlasestateagents.co.uk/javascript/tether.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.2/js/bootstrap.min.js" integrity="sha384-vZ2WRJMwsjRMW/8U7i6PWi6AlO1L79snBrmgiDpgIWJ82z8eA5lenwvxbMV1PAh7" crossorigin="anonymous"></script>

    <!-- Mapbox -->
    <script src='https://api.mapbox.com/mapbox.js/v2.3.0/mapbox.js'></script>

    <!-- Leaftlet -->
    <script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-draw/v0.2.3/leaflet.draw.js'></script>
    <script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-geodesy/v0.1.0/leaflet-geodesy.js'></script>

    <!-- The core React library -->
    <script src="https://fb.me/react-15.0.1.js"></script>
    <!-- The ReactDOM Library -->
    <script src="https://fb.me/react-dom-15.0.1.js"></script>
    <!-- Browser -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"></script>

    <!-- React View Loader -->
    <script src="/js/dashboard.js"></script>

    <!-- Basic Javascript -->
    <script src="/js/basic.js"></script>

    <!-- Custom Javascript -->
    <script type="text/javascript">

        var _map = (function() {

            // Private variables
            var latitude1, longitude1, latitude2, longitude2;

            var _init = function(){
                loadMap();
            }

            function loadMap(){

                // MECHETE ALERT: This was doing to grant access to these variables in 
                // nested functions.
                latitude1 = longitude1 = latitude2 = longitude2 = null;

                // Load initial map and center it at UNICAMP
                L.mapbox.accessToken = 'pk.eyJ1IjoiamJlbGVubyIsImEiOiJRbGhXRkhVIn0.h2cvX1dQMRnGDT3OBppm3A';
                var map = L.mapbox.map('map', 'mapbox.streets').setView([-22.8171043, -47.069731], 5);

                // Add a feature group
                var featureGroup = L.featureGroup().addTo(map);

                // Enable the kind of graphic you want allow users to draw
                var drawControl = new L.Control.Draw({
                  edit: {
                    featureGroup: featureGroup
                    },
                    draw: {
                        polygon: false,
                        polyline: false,
                        rectangle: true,
                        circle: false,
                        marker: false
                    }
                }).addTo(map);

                // Set listeners to create and update the polygon(rectangle) area
                map.on('draw:created', showPolygonArea);
                map.on('draw:edited', showPolygonAreaEdited);

                // Re-draw the rectangle in the map
                function showPolygonAreaEdited(e) {
                    e.layers.eachLayer(function(layer) {
                        showPolygonArea({ layer: layer });
                    });
                }

                // Draw the rectangle in the map
                function showPolygonArea(e) {
                    featureGroup.clearLayers();
                    featureGroup.addLayer(e.layer);
                    e.layer.bindPopup((LGeo.area(e.layer) / 1000000).toFixed(2) + ' km<sup>2</sup>');
                    e.layer.openPopup();

                    // I did this shit by myself, because I didn't found so much
                    // information in the documentation, so I read the code of
                    // leaflet-geodesy and found some interesting things just 
                    // when printing console.log(e.layer.toGeoJSON());
                    // There's an array of coordinates inside geometry that contains
                    // in this case 5 arrays with (lat, long) information, but
                    // as I'm working with a rectangle the first and the final point
                    // are the same, but I'm going to work just with the first and the
                    // third value, because Twitter Streaming API just require that
                    latitude1 = e.layer.toGeoJSON().geometry.coordinates[0][0][0];
                    longitude1 = e.layer.toGeoJSON().geometry.coordinates[0][0][1];
                    latitude2 = e.layer.toGeoJSON().geometry.coordinates[0][2][0];
                    longitude2 = e.layer.toGeoJSON().geometry.coordinates[0][2][1];
                }
            }

            var _location = function (){
                return {
                    latitude_start: latitude1,
                    longitude_start: longitude1,
                    latitude_finish: latitude2,
                    longitude_finish: longitude2
                };
            }

            return {
                init: _init,
                location: _location
            };

        })();

        var _project = (function(){

            // Declare pointers
            var name = $("#input-name");
            var follow = $("#textarea-follow");
            var track = $("#textarea-track");
            var languages = $("#textarea-language");
            var count = $("#input-count");
            var start_date = $("#input-start-date");
            var finish_date = $("#input-finish-date");

            // Perform a POST request to save data about a new project, if 
            // everything went OK reload the page to show the new project 
            // in dashboard, but if something went wrong show a message to the 
            // user
            function _create(btn){

                // Get the location from the map
                var location = _map.location();
                var latitude_start = location.latitude_start;
                var longitude_start = location.longitude_start;
                var latitude_finish = location.latitude_finish;
                var longitude_finish = location.longitude_finish;

                var errorMessage = "Ups! it seems we have problems in our servers, please contact us";
                disableButton(btn);
                postRequest(
                    'projects/create',
                    {
                        name: name.val(),
                        follow: follow.val(),
                        track: track.val(),
                        languages: languages.val(),
                        count: count.val(),
                        latitude_start: latitude_start,
                        longitude_start: longitude_start,
                        latitude_finish: latitude_finish,
                        longitude_finish: longitude_finish
                    },
                    function(res){
                        enableButton(btn);
                        if(res.status == "OK"){
                            window.location.reload();
                        }else if(res.msg){
                            showMessage(res.msg, "#errorBoxNewProject", "alert-danger");
                        }else{
                            showMessage(errorMessage, "#errorBoxNewProject", "alert-danger");
                        }
                    },
                    function(err){
                        enableButton(btn);
                        showMessage(errorMessage, "#errorBoxNewProject", "alert-danger");
                    }
                );
            }

            return {
                create: _create
            }
            
        })();

        $( document ).ready(function() {
            // Activate tooltips
            $('[data-toggle="tooltip"]').tooltip();

            // Load map
            _map.init();

            // When the user clics on the button, it's send a request to the server
            // to save a new project
            $("#btnNewProject").click(
                function(){
                    _project.create("#btnNewProject");
                }
            );
            
        })
    </script>
</body>
</html>